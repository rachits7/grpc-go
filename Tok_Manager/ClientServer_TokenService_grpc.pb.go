// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: ClientServer_TokenService.proto

package Tok_Service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MytokService_CreateTok_FullMethodName = "/mytokService/CreateTok"
	MytokService_DropTok_FullMethodName   = "/mytokService/DropTok"
	MytokService_WriteTok_FullMethodName  = "/mytokService/WriteTok"
	MytokService_ReadTok_FullMethodName   = "/mytokService/ReadTok"
)

// MytokServiceClient is the client API for MytokService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MytokServiceClient interface {
	CreateTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*CreateTokResponse, error)
	DropTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*DropTokResponse, error)
	WriteTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*WriteTokResponse, error)
	ReadTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ReadTokResponse, error)
}

type mytokServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMytokServiceClient(cc grpc.ClientConnInterface) MytokServiceClient {
	return &mytokServiceClient{cc}
}

func (c *mytokServiceClient) CreateTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*CreateTokResponse, error) {
	out := new(CreateTokResponse)
	err := c.cc.Invoke(ctx, MytokService_CreateTok_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mytokServiceClient) DropTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*DropTokResponse, error) {
	out := new(DropTokResponse)
	err := c.cc.Invoke(ctx, MytokService_DropTok_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mytokServiceClient) WriteTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*WriteTokResponse, error) {
	out := new(WriteTokResponse)
	err := c.cc.Invoke(ctx, MytokService_WriteTok_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mytokServiceClient) ReadTok(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ReadTokResponse, error) {
	out := new(ReadTokResponse)
	err := c.cc.Invoke(ctx, MytokService_ReadTok_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MytokServiceServer is the server API for MytokService service.
// All implementations must embed UnimplementedMytokServiceServer
// for forward compatibility
type MytokServiceServer interface {
	CreateTok(context.Context, *Token) (*CreateTokResponse, error)
	DropTok(context.Context, *Token) (*DropTokResponse, error)
	WriteTok(context.Context, *Token) (*WriteTokResponse, error)
	ReadTok(context.Context, *Token) (*ReadTokResponse, error)
	mustEmbedUnimplementedMytokServiceServer()
}

// UnimplementedMytokServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMytokServiceServer struct {
}

func (UnimplementedMytokServiceServer) CreateTok(context.Context, *Token) (*CreateTokResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTok not implemented")
}
func (UnimplementedMytokServiceServer) DropTok(context.Context, *Token) (*DropTokResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTok not implemented")
}
func (UnimplementedMytokServiceServer) WriteTok(context.Context, *Token) (*WriteTokResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteTok not implemented")
}
func (UnimplementedMytokServiceServer) ReadTok(context.Context, *Token) (*ReadTokResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTok not implemented")
}
func (UnimplementedMytokServiceServer) mustEmbedUnimplementedMytokServiceServer() {}

// UnsafeMytokServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MytokServiceServer will
// result in compilation errors.
type UnsafeMytokServiceServer interface {
	mustEmbedUnimplementedMytokServiceServer()
}

func RegisterMytokServiceServer(s grpc.ServiceRegistrar, srv MytokServiceServer) {
	s.RegisterService(&MytokService_ServiceDesc, srv)
}

func _MytokService_CreateTok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MytokServiceServer).CreateTok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MytokService_CreateTok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MytokServiceServer).CreateTok(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _MytokService_DropTok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MytokServiceServer).DropTok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MytokService_DropTok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MytokServiceServer).DropTok(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _MytokService_WriteTok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MytokServiceServer).WriteTok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MytokService_WriteTok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MytokServiceServer).WriteTok(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _MytokService_ReadTok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MytokServiceServer).ReadTok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MytokService_ReadTok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MytokServiceServer).ReadTok(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// MytokService_ServiceDesc is the grpc.ServiceDesc for MytokService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MytokService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mytokService",
	HandlerType: (*MytokServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTok",
			Handler:    _MytokService_CreateTok_Handler,
		},
		{
			MethodName: "DropTok",
			Handler:    _MytokService_DropTok_Handler,
		},
		{
			MethodName: "WriteTok",
			Handler:    _MytokService_WriteTok_Handler,
		},
		{
			MethodName: "ReadTok",
			Handler:    _MytokService_ReadTok_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ClientServer_TokenService.proto",
}
